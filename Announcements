<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Announcements â€¢ AHS Class of â€™28</title>
  <meta name="theme-color" content="#0d6efd" />
  <link rel="stylesheet" href="styles.css" />
</head>
<body>
  <!-- ============================ HEADER / NAV ============================ -->
  <header class="header" role="banner">
    <nav class="nav" aria-label="Primary">
      <a class="brand" href="./" aria-label="AHS Class of 2028 â€” Home">
        <span class="logo" aria-hidden="true">A</span>
        AHS Class of â€™28
      </a>
      <div class="links" role="navigation">
        <a href="./">Home</a>
        <a href="./fundraisers.html">Fundraisers</a>
        <a href="./calendar.html">Calendar</a>
        <a href="./media.html">Media</a>
        <a href="./achievements.html">Achievements</a>
        <a href="./about.html">About</a>
        <a href="./contact.html">Contact</a>
        <a href="./merch.html">Shop</a>
        <a href="./community.html">Community</a>
        <a class="active" href="./announcements.html">Announcements</a>
      </div>
      <button id="menuBtn" class="menu-btn" aria-expanded="false" aria-controls="mobileMenu" aria-label="Open menu">â˜°</button>
    </nav>

    <!-- Mobile menu -->
    <div id="mobileMenu" class="mobile-menu hidden" role="dialog" aria-modal="true" aria-label="Mobile navigation">
      <a href="./">Home</a>
      <a href="./fundraisers.html">Fundraisers</a>
      <a href="./calendar.html">Calendar</a>
      <a href="./media.html">Media</a>
      <a href="./achievements.html">Achievements</a>
      <a href="./about.html">About</a>
      <a href="./contact.html">Contact</a>
      <a href="./merch.html">Shop</a>
      <a href="./community.html">Community</a>
      <a class="active" href="./announcements.html">Announcements</a>
      <div class="small" style="padding:8px 10px; opacity:.8">Tap outside to close</div>
    </div>
  </header>

  <!-- ============================ PAGE CONTENT =========================== -->
  <main class="section" role="main">
    <div class="container">
      <div class="panel glass hover-up" style="display:flex; align-items:center; justify-content:space-between; gap:12px;">
        <div>
          <h1 style="margin:0;">Announcements</h1>
          <p class="small" style="margin:4px 0 0;">Simple to manage via <code>/data/announcements.json</code>. Pinned items show first.
          </p>
        </div>
        <div class="inline" style="align-items:center; gap:8px;">
          <button id="subscribeBtn" class="btn" aria-pressed="false" title="Enable browser notifications">
            ðŸ”” Enable alerts
          </button>
          <button id="markReadBtn" class="btn" title="Mark all announcements as read">Mark all read</button>
        </div>
      </div>

      <!-- Filters / search (optional, lightweight) -->
      <div class="panel hover-up" style="margin-top:14px;">
        <div class="inline" style="align-items:center;">
          <input id="search" class="input" placeholder="Search announcements (title, body, tags)â€¦" aria-label="Search announcements" />
          <select id="tagFilter" class="select" aria-label="Filter by tag">
            <option value="">All tags</option>
          </select>
          <select id="statusFilter" class="select" aria-label="Filter by status">
            <option value="">All</option>
            <option value="active">Active</option>
            <option value="upcoming">Upcoming</option>
            <option value="past">Past</option>
          </select>
        </div>
      </div>

      <!-- Announcements list -->
      <div id="list" class="card-list" style="margin-top:14px;"></div>

      <!-- Empty state -->
      <div id="empty" class="panel" style="display:none; text-align:center;">
        <div class="small">No announcements match your filters.</div>
      </div>

      <!-- How to manage (visible only to admins if you want later) -->
      <div class="panel" style="margin-top:16px;">
        <details>
          <summary class="small">How to add an announcement</summary>
          <div class="small" style="margin-top:8px; line-height:1.6;">
            Edit <code>/data/announcements.json</code> in your repo. Example:
            <pre style="white-space:pre-wrap;">[
  {
    "id": "first-day-2025",
    "title": "Welcome back! First day schedule",
    "body": "Bell schedule, advisory, and bus updates.",
    "tags": ["school", "schedule"],
    "pinned": true,
    "status": "active",   // active | upcoming | past
    "url": "./calendar.html",
    "updatedAt": "2025-08-12T18:00:00-04:00"
  }
]</pre>
          </div>
        </details>
      </div>
    </div>
  </main>

  <!-- ============================== FOOTER =============================== -->
  <footer class="footer">
    <div class="container">
      <div class="small">Built for AHS Class of 2028 â€¢ Manage data in <code>/data/announcements.json</code></div>
    </div>
  </footer>

  <!-- Toast for small notices -->
  <div id="toast" class="toast info hidden" role="status" aria-live="polite"></div>

  <!-- ============================== SCRIPTS ============================== -->
  <script>
  // Helper
  const $ = (sel, el=document) => el.querySelector(sel);
  const $$ = (sel, el=document) => Array.from(el.querySelectorAll(sel));

  // Mobile menu toggle
  const menuBtn = $('#menuBtn');
  const mobileMenu = $('#mobileMenu');
  function onToggleMenu(){
    const nowHidden = mobileMenu.classList.toggle('hidden');
    menuBtn?.setAttribute('aria-expanded', String(!nowHidden));
  }
  menuBtn?.addEventListener('click', onToggleMenu);
  document.addEventListener('click', (e)=>{
    if (!mobileMenu || mobileMenu.classList.contains('hidden')) return;
    const outside = !mobileMenu.contains(e.target) && !menuBtn.contains(e.target);
    if (outside) onToggleMenu();
  });

  // --------------------------- Announcements ---------------------------
  const DATA_URL = './data/announcements.json'; // place a JSON file here
  const LIST = $('#list');
  const EMPTY = $('#empty');
  const SEARCH = $('#search');
  const TAG = $('#tagFilter');
  const STATUS = $('#statusFilter');
  const SUB_BTN = $('#subscribeBtn');
  const READ_BTN = $('#markReadBtn');
  const TOAST = $('#toast');

  const LS_LAST_SEEN = 'ann_last_seen';
  const LS_SUB = 'ann_subscribed';

  let announcements = [];
  let allTags = new Set();

  function toast(msg, kind='info'){
    if (!TOAST) return;
    TOAST.textContent = msg;
    TOAST.className = `toast ${kind}`;
    TOAST.classList.remove('hidden');
    setTimeout(()=>TOAST.classList.add('hidden'), 2200);
  }

  function formatDate(iso){
    try { return new Date(iso).toLocaleString('en-US', { month:'short', day:'numeric', hour:'numeric', minute:'2-digit'}); }
    catch { return iso; }
  }

  function newestTimestamp(items){
    return items.reduce((max, a)=> Math.max(max, +new Date(a.updatedAt||0)), 0);
  }

  function render(){
    const q = SEARCH.value.trim().toLowerCase();
    const tag = TAG.value;
    const status = STATUS.value;
    const lastSeen = +(localStorage.getItem(LS_LAST_SEEN)||0);

    let list = announcements
      .filter(a=> !q || (a.title+" "+a.body+" "+(a.tags||[]).join(' ')).toLowerCase().includes(q))
      .filter(a=> !tag || (a.tags||[]).includes(tag))
      .filter(a=> !status || a.status===status)
      .sort((a,b)=> (b.pinned===true)-(a.pinned===true) || +new Date(b.updatedAt)-+new Date(a.updatedAt));

    LIST.innerHTML = '';

    if (!list.length){
      EMPTY.style.display = 'block';
      return;
    }
    EMPTY.style.display = 'none';

    for (const a of list){
      const isNew = +new Date(a.updatedAt||0) > lastSeen;
      const el = document.createElement('article');
      el.className = 'card-item';
      el.innerHTML = `
        <div class="row">
          <div class="title">${a.title || 'Untitled'}</div>
          <div class="inline">
            ${a.pinned ? '<span class="badge purple" title="Pinned">Pinned</span>' : ''}
            ${a.status==='active' ? '<span class="badge blue">Active</span>' : ''}
            ${a.status==='upcoming' ? '<span class="badge">Upcoming</span>' : ''}
            ${a.status==='past' ? '<span class="badge">Past</span>' : ''}
            ${isNew ? '<span class="badge red">NEW</span>' : ''}
          </div>
        </div>
        <div class="meta">${formatDate(a.updatedAt)}${(a.tags&&a.tags.length)? ' â€¢ '+a.tags.map(t=>`#${t}`).join(' ') : ''}</div>
        <div style="margin-top:6px;">${a.body || ''}</div>
        ${a.url ? `<div class="inline" style="margin-top:10px;"><a class="btn" href="${a.url}">Open</a></div>` : ''}
      `;
      LIST.appendChild(el);
    }
  }

  async function load(){
    try{
      const res = await fetch(DATA_URL, { cache:'no-store' });
      if (!res.ok) throw new Error('Failed to load announcements');
      const data = await res.json();
      announcements = Array.isArray(data) ? data : [];
      // collect tags
      allTags = new Set();
      announcements.forEach(a => (a.tags||[]).forEach(t=> allTags.add(t)));
      TAG.innerHTML = '<option value="">All tags</option>' + Array.from(allTags).sort().map(t=>`<option value="${t}">${t}</option>`).join('');
      render();
      maybeNotify();
    }catch(e){
      LIST.innerHTML = '<div class="panel">Could not load announcements.</div>';
      console.error(e);
    }
  }

  // --------------------------- Notifications ---------------------------
  function isSubscribed(){ return localStorage.getItem(LS_SUB)==='1'; }
  function setSubscribed(v){ localStorage.setItem(LS_SUB, v? '1':'0'); SUB_BTN.setAttribute('aria-pressed', String(!!v)); SUB_BTN.textContent = v ? 'ðŸ”” Alerts on' : 'ðŸ”” Enable alerts'; }

  async function requestPermission(){
    if (!('Notification' in window)) { toast('Notifications not supported'); return false; }
    let perm = Notification.permission;
    if (perm === 'default') perm = await Notification.requestPermission();
    if (perm !== 'granted'){ toast('Permission denied'); return false; }
    return true;
  }

  async function maybeNotify(){
    if (!isSubscribed()) return; // user controls it
    if (!('Notification' in window) || Notification.permission !== 'granted') return;

    const latest = newestTimestamp(announcements);
    const lastSeen = +(localStorage.getItem(LS_LAST_SEEN)||0);
    if (latest > lastSeen){
      const newCount = announcements.filter(a => +new Date(a.updatedAt||0) > lastSeen).length;
      try{
        new Notification('New announcement' + (newCount>1? 's':''), {
          body: newCount===1 ? announcements.find(a=> +new Date(a.updatedAt||0)===latest)?.title || 'Updated' : `${newCount} new items`,
          icon: '/favicon.ico'
        });
      }catch{}
    }
  }

  SUB_BTN.addEventListener('click', async ()=>{
    if (!isSubscribed()){
      const ok = await requestPermission();
      if (!ok) return;
      setSubscribed(true);
      toast('Alerts enabled');
      maybeNotify();
    } else {
      setSubscribed(false);
      toast('Alerts disabled');
    }
  });

  READ_BTN.addEventListener('click', ()=>{
    const ts = Date.now();
    localStorage.setItem(LS_LAST_SEEN, String(ts));
    render();
    toast('Marked all as read', 'success');
  });

  // First-load local state
  setSubscribed(isSubscribed());
  if (!localStorage.getItem(LS_LAST_SEEN)) localStorage.setItem(LS_LAST_SEEN, '0');

  // Filters
  SEARCH.addEventListener('input', render);
  TAG.addEventListener('change', render);
  STATUS.addEventListener('change', render);

  // Load announcements
  load();
  // Optional refresh every 5 minutes while page is open
  setInterval(load, 5*60*1000);
  </script>
</body>
</html>
